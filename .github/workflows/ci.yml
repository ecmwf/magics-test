name: ci

# Controls when the workflow will run
on:

  # Trigger the workflow on all pushes, except on tag creation
  push:
    branches:
    - '**'
    tags-ignore:
    - '**'

  # Trigger the workflow on all pull requests
  pull_request: ~

  # Allow workflow to be dispatched on demand
  workflow_dispatch: ~

  # Trigger the workflow on upstream updates
  repository_dispatch:
    types:
    - magics-updated
    - magics-python-updated

jobs:
  ci:
    name: ci
    strategy:
      fail-fast: false
      matrix:
        name:
        - gnu-10@ubuntu-20.04
        - clang-12@ubuntu-20.04
        - gnu-10@ubuntu-18.04
        - clang-9@ubuntu-18.04
        # Currently disabled because of dynamic library linking issues
        # - gnu-10@macos-10.15
        - clang-12@macos-10.15
        include:
        - name: gnu-10@ubuntu-20.04
          os: ubuntu-20.04
          compiler: gnu-10
          compiler_cc: gcc-10
          compiler_cxx: g++-10
          compiler_fc: gfortran-10
        - name: clang-12@ubuntu-20.04
          os: ubuntu-20.04
          compiler: clang-12
          compiler_cc: clang-12
          compiler_cxx: clang++-12
          compiler_fc: gfortran-10
        - name: gnu-10@ubuntu-18.04
          os: ubuntu-18.04
          compiler: gnu-10
          compiler_cc: gcc-10
          compiler_cxx: g++-10
          compiler_fc: gfortran-10
        - name: clang-9@ubuntu-18.04
          os: ubuntu-18.04
          compiler: clang-9
          compiler_cc: clang-9
          compiler_cxx: clang++-9
          compiler_fc: gfortran-9
        # Currently disabled because of dynamic library linking issues
        # - name: gnu-10@macos-10.15
        #   os: macos-10.15
        #   compiler: gnu-10
        #   compiler_cc: gcc-10
        #   compiler_cxx: g++-10
        #   compiler_fc: gfortran-10
        # Xcode compiler requires empty environment variables, so we pass null (~) here
        - name: clang-12@macos-10.15
          os: macos-10.15
          compiler: clang-12
          compiler_cc: ~
          compiler_cxx: ~
          compiler_fc: gfortran-10
    runs-on: ${{ matrix.os }}
    env:
      MAGICS_BRANCH: master
      MAGICS_PYTHON_BRANCH: master
    steps:
    - name: Workflow Trigger
      run: |
        echo '::group::Event Information'
        echo '==> event_name: ${{ github.event_name }}'
        echo '==> ref: ${{ github.ref }}'
        echo '==> sha: ${{ github.sha }}'
        echo '==> event.action: ${{ github.event.action }}'
        echo '==> event.branch: ${{ github.event.branch }}'
        echo '==> event.client_payload: ${{ toJSON(github.event.client_payload) }}'
        echo '::endgroup::'

    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Checkout magics-python Repository
      uses: actions/checkout@v2
      with:
        repository: ecmwf/magics-python
        ref: ${{ github.event.client_payload.magics_python_ref || env.MAGICS_PYTHON_BRANCH }}
        path: ./magics-python

    - name: Install System Dependencies (Ubuntu)
      shell: bash -eux {0}
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get -q -y update
        [[ "${{ matrix.os }}" == "ubuntu-18.04" ]] && NETCDF_PACKAGE=13 || NETCDF_PACKAGE=15
        sudo apt-get -q -y install libnetcdf$NETCDF_PACKAGE libnetcdf-dev libpango1.0-dev libcurl4-openssl-dev

    - name: Install System Dependencies (macOS)
      shell: bash -eux {0}
      if: startsWith(matrix.os, 'macos')
      run: brew install netcdf imagemagick pango

    - name: Install Dependencies
      id: install-dependencies
      uses: ecmwf-actions/build-package@v2
      with:
        self_build: false
        dependencies: |
          ecmwf/ecbuild
          ecmwf/eccodes
          OSGeo/PROJ@refs/tags/8.1.1
          ecmwf/magics@${{ github.event.client_payload.magics_ref || env.MAGICS_BRANCH }}
        dependency_branch: develop

    - name: Configure Fonts
      shell: bash -eux {0}
      run: |
        FONTS_DIR=${{ runner.temp }}/fonts
        FC_DIR=$HOME/.config/fontconfig
        FC_CONF=$FC_DIR/fonts.conf
        mkdir -p $FONTS_DIR && cd $FONTS_DIR
        wget -q -O freefont.zip http://ftp.gnu.org/gnu/freefont/freefont-otf-20100919.zip
        unzip freefont.zip && rm freefont.zip
        mkdir -p $FC_DIR
        cat << EOF > $FC_CONF
        <?xml version="1.0"?>
        <!DOCTYPE fontconfig SYSTEM "fonts.dtd">
        <fontconfig>
            <dir>$FONTS_DIR</dir>
            <match>
                <test name="family">
                    <string>sans-serif</string>
                </test>
                <edit name="family" mode="assign" binding="strong">
                    <string>FreeSans</string>
                </edit>
            </match>
            <match>
                <test name="family">
                    <string>helvetica</string>
                </test>
                <edit name="family" mode="assign" binding="strong">
                    <string>FreeSans</string>
                </edit>
            </match>
            <match>
                <test name="family">
                    <string>times</string>
                </test>
                <edit name="family" mode="assign" binding="strong">
                    <string>FreeSerif</string>
                </edit>
            </match>
        </fontconfig>
        EOF
        fc-cache && fc-match sansserif && fc-match helvetica && fc-match times

    - name: Setup Environment
      shell: bash -eux {0}
      run: |
        MAGICS_HEAD=$( curl -u ${{ secrets.GH_USER }}:${{ secrets.GH_PAT }} https://api.github.com/repos/ecmwf/magics/git/ref/heads/${{ env.MAGICS_BRANCH }} | jq .object.sha | tr -d '"' )
        MAGICS_PYTHON_HEAD=$( curl -u ${{ secrets.GH_USER }}:${{ secrets.GH_PAT }} https://api.github.com/repos/ecmwf/magics-python/git/ref/heads/${{ env.MAGICS_PYTHON_BRANCH }} | jq .object.sha | tr -d '"' )
        MAGICS_PAYLOAD_SHA=${{ github.event.client_payload.magics_sha }}
        MAGICS_PYTHON_PAYLOAD_SHA=${{ github.event.client_payload.magics_python_sha }}
        echo "MAGICS_SHA=${MAGICS_PAYLOAD_SHA:-$MAGICS_HEAD}" >> $GITHUB_ENV
        echo "MAGICS_PYTHON_SHA=${MAGICS_PYTHON_PAYLOAD_SHA:-$MAGICS_PYTHON_HEAD}" >> $GITHUB_ENV
        echo "MAGPLUS_HOME=${{ runner.temp }}/install/magics" >> $GITHUB_ENV  # Magics path
        echo "MAGPLUS_REGRESSION=ON" >> $GITHUB_ENV  # Remove PageID text

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install Python Dependencies
      shell: bash -eux {0}
      run: |
        python -m pip install --upgrade pip
        python -m pip install cftime netcdf4 pytest pytest-html xarray
        python -m pip install ./magics-python
        python -m Magics selfcheck
        rm -rf ./magics-python  # cleanup

    - name: Download Reference Artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        branch: master
        workflow: reference.yml
        name: magics-test-reference-${{ matrix.os }}
        path: reference

    - name: Run Tests
      shell: bash -eux {0}
      run: python -m pytest --html report.html

    - name: Prepare Test Report Artifact
      if: always()
      shell: bash -eux {0}
      run: |
        [[ "${{ matrix.os }}" == "macos-10.15" ]] && sed -i '' 's#file://${{ github.workspace }}/##' report.html || sed -i 's#file://${{ github.workspace }}/##' report.html
        tar -cvf magics-test-report-${{ matrix.os }}-${{ matrix.compiler }}-magics-${{ env.MAGICS_SHA }}-magics-python-${{ env.MAGICS_PYTHON_SHA }}.tar assets reference report.html results

    - name: Upload Test Report Artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: magics-test-report-${{ matrix.os }}-${{ matrix.compiler }}-magics-${{ env.MAGICS_SHA }}-magics-python-${{ env.MAGICS_PYTHON_SHA }}
        path: magics-test-report-${{ matrix.os }}-${{ matrix.compiler }}-magics-${{ env.MAGICS_SHA }}-magics-python-${{ env.MAGICS_PYTHON_SHA }}.tar

  notify:
    name: notify
    runs-on: ubuntu-20.04
    needs: ci
    if: always() && github.ref == 'refs/heads/master'
    steps:
    - name: Notify Teams
      uses: ecmwf-actions/notify-teams@v1
      with:
        incoming_webhook: ${{ secrets.MS_TEAMS_INCOMING_WEBHOOK }}
        needs_context: ${{ toJSON(needs) }}
